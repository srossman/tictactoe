window.onload = setup; // Calling setup function at program start

/* Globals */
const classes=["e","b","w"];
var turns=[];
var buttonElementRandom = document.getElementById("next");
var title = document.getElementById("title");
var board = document.getElementById("board");
var rows = document.getElementById("rows");
var validTurn = null;

var token = 1; // Decides who is black and who is white
var winner = false;

function setup() {
	title.innerHTML = "Tic Tac Toe!";
	boardReset("Here are instructions.");
	buttonElementRandom.innerHTML = "Play";
  newBoard();
}

/* Main */
function main() {
  document.getElementById("status").innerHTML = "Valid";

  while (winner==false){
    while (rows.hasChildNodes()) {
      rows.removeChild(rows.firstChild);
    }

    if(token==1){
      players_turn();
    }
    else {
      cpuTurn();
      turnSwitch();
    }

    buildBoard();
    didIWin(turns);
  }
}

function newBoard() {
  document.getElementById("status").innerHTML = "New";
  
  turns=[];
  // 1-d array, so []
  for (let row=0;row<3;row++){
    turns.push([]);
    // push 3 1-d row arrays into turns, so: [[],[],[]]
    for (let col=0;col<3;col++){
      //let turnVal=Math.floor(Math.random()*3); MAKES IT SO TURNS ARRAY IS FILLED WITH RANDOM VALUES
      let turnVal=0;
      let turnClass=classes[turnVal];
      turns[row].push(turnClass);
      // push the classes into each row, so [["e","e","e"],["e","e","e"],["e","e","e"]]
      }
    }
    console.log(turns);
}

function validateTurn(x,y) {
  if (x<=2 && x>=0 && y<=2 && y>=0) {
    return true;
  }
  else {
    return false;
  }
}

function players_turn(){
  turns[0][0] = classes[2];
}
/*
function players_turn() {
  //Player Inputs
  var x_input = document.getElementById('x').value;
  var y_input = document.getElementById('y').value;

  validTurn=validateTurn(x_input,y_input);

  if(validTurn==true){
    if (turns[x_input][y_input] == "e") {
      turns[x_input][y_input] = classes[2];
      turnSwitch();
    }
    else {
      document.getElementById("status").innerHTML = "Taken";
    }
    console.log("------------------------");
    console.log(turns);
  }
  else{
    document.getElementById("status").innerHTML = "Invalid";
  }
}
*/
function turnSwitch(){
  if (token==1){
    token=2; // SWITCH TO PLAYERS TURN
  }
  else {
    token=1; // SWITCH TO CPU TURN
  }
}

function cpuTurn(){
  var testingTurns = turns;
  console.log(testingTurns);

  // SOMETHING THAT REPLACES MOVE THING
  for(let row=0;row<3;row++){
    for(let col=0;col<3;col++){
      if(testingTurns[row][col]=="e"){
        testingTurns[row][col] = classes[1];
        didIWin(testingTurns);
        if(winner==true){
          turns[row][col] = classes[1];
          console.log(turns);
          break; // So the Col for loop stops
        }
        else{
          testingTurns[row][col] = classes[0];
        }
      }
    }
    if(winner==true){ //So the Row for loop stops
      break;
    }
  }
  // This for loop is to make sure white doesn't win
  for(let row=0;row<3;row++){
    for(let col=0;col<3;col++){
      if(testingTurns[row][col]=="e"){
        testingTurns[row][col] = classes[2];
        didIWin(testingTurns);
        if(winner==true){
          turns[row][col] = classes[1];
          console.log(turns);
          break; // So the Col for loop stops
        }
        else{
          testingTurns[row][col] = classes[0];
        }
      }
    }
  }
  
  if(winner!=true){
	  randomCPU();
  }
}

function randomCPU(){
  var randomCPU_x = Math.floor(Math.random()*3);
  var randomCPU_y = Math.floor(Math.random()*3);

  while (turns[randomCPU_x][randomCPU_y]!=classes[0]){
    randomCPU_x = Math.floor(Math.random()*3);
    randomCPU_y = Math.floor(Math.random()*3);
  }
  turns[randomCPU_x][randomCPU_y] = classes[1];

  //var randomCPU_array = [randomCPU_x,randomCPU_y];
  //return randomCPU_array;
}

function buildBoard(){
	for (let row=0;row<3;row++){
    var rowNode = document.createElement("ul");
    rowNode.className = "row";
    rows.appendChild(rowNode);
    for (let col=0;col<3;col++){
      // count turns
      // find last UL (row)
      var newRow = rows.lastChild;
      // prepare LI for row
      var turnNode = document.createElement("li");
      // look up and add class
      turnNode.setAttribute("class", turns[row][col]);
      // add LI to row
	    newRow.appendChild(turnNode);
	  }
	}
}

// ADD BOOLEAN GLOBAL THAT EXITS GAME IF WINNER
function didIWin(array){
  for (let row=0;row<3;row++){
    for (let col=0;col<3;col++){
      if (array[row][0]==array[row][1]&&array[row][1]==array[row][2]&&array[row][col]!=classes[0]){
        if (array[row][col]=="b") console.log("Black won!");
        else console.log("White won!");
        console.log(row + "row wins!" + array);
        winner=true;
        return winner;
      }
      if (array[0][col]==array[1][col]&&array[1][col]==array[2][col]&&array[row][col]!="e"){
        if (array[row][col]=="b") console.log("Black won!");
        else console.log("White won!");
        console.log(col + "column wins!" + array);
        winner=true;
        return winner;
      }
    }
  }
}

function boardReset(message){
  board.removeChild(board.childNodes[2]);
  var messageArea = document.createElement("p");
  messageArea.innerHTML=message;
  board.appendChild(messageArea);
}
